// Generated by CoffeeScript 1.10.0
(function() {
  var APNSChannel, APNSTemplate, NotificatorChannel, apn, async,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  apn = require('apn');

  async = require('async');

  NotificatorChannel = require('../NotificatorChannel');

  APNSTemplate = (function(superClass) {
    extend(APNSTemplate, superClass);

    function APNSTemplate() {}

    APNSTemplate.prototype.getMessage = function(data) {
      var key, notification;
      data = APNSTemplate.__super__.getMessage.call(this, data);
      notification = new apn.Notification();
      for (key in data) {
        notification[key] = data[key];
      }
      return notification;
    };

    return APNSTemplate;

  })(NotificatorChannel.ChannelTemplate);

  APNSChannel = (function(superClass) {
    extend(APNSChannel, superClass);

    function APNSChannel(options) {
      this.connection = new apn.Connection(options);
      this.connection.on('error', console.error);
      APNSChannel.__super__.constructor.call(this, options);
    }

    APNSChannel.prototype.sendMessage = function(message, destination, callback) {
      var device;
      device = new apn.Device(destination);
      this.connection.pushNotification(message, device);
      return async.nextTick(function() {
        if (callback) {
          return callback();
        }
      });
    };

    APNSChannel.prototype.validateTemplate = function(template) {
      return APNSChannel.__super__.validateTemplate.call(this, template);
    };

    APNSChannel.prototype.validateDestination = function(destination) {
      return true;
    };

    return APNSChannel;

  })(NotificatorChannel);

  APNSChannel.Template = APNSTemplate;

  module.exports = APNSChannel;

}).call(this);
