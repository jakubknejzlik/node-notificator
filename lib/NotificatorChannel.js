// Generated by CoffeeScript 1.10.0
(function() {
  var ChannelTemplate, NotificatorChannel, swig;

  swig = require('swig');

  ChannelTemplate = (function() {
    function ChannelTemplate() {}

    ChannelTemplate.prototype.parsedData = function(data) {
      var _data, key, result, value;
      result = {};
      _data = {};
      for (key in data) {
        value = data[key];
        _data[key] = value;
      }
      _data.data = data;
      for (key in this) {
        value = this[key];
        if (typeof value === 'string') {
          value = swig.render(value, {
            locals: _data
          });
          result[key] = value;
        }
      }
      return result;
    };

    return ChannelTemplate;

  })();

  NotificatorChannel = (function() {
    function NotificatorChannel(options) {
      this.options = options != null ? options : {};
      if (!this.options.getDestinations) {
        this.options.getDestinations = function(obj, callback) {
          return callback(new Error('options.getDestinations not specified'));
        };
      }
      if (!this.options.getTemplate) {
        this.options.getTemplate = function(obj, callback) {
          return callback(new Error('options.getTemplate not specified'));
        };
      }
    }

    NotificatorChannel.prototype.getDestinations = function(receiver, callback) {
      return this.options.getDestinations(receiver, (function(_this) {
        return function(err, destinations) {
          var destination, error, i, len;
          if (err) {
            return callback(err);
          }
          try {
            for (i = 0, len = destinations.length; i < len; i++) {
              destination = destinations[i];
              _this.validateDestination(destination);
            }
            return callback(null, destinations);
          } catch (error) {
            err = error;
            return callback(err);
          }
        };
      })(this));
    };

    NotificatorChannel.prototype.getTemplate = function(event, language, callback) {
      return this.options.getTemplate(event, language, (function(_this) {
        return function(err, template) {
          var error;
          if (err) {
            return callback(err);
          }
          if (!template) {
            template = _this.options.defaultTemplate;
          }
          try {
            _this.validateTemplate(template);
            return callback(null, template);
          } catch (error) {
            err = error;
            return callback(err);
          }
        };
      })(this));
    };

    NotificatorChannel.prototype.sendMessage = function(message, destination, callback) {
      return callback(new Error('sendMessage not implemented'));
    };

    NotificatorChannel.prototype.validateDestination = function(destination) {
      return true;
    };

    NotificatorChannel.prototype.validateTemplate = function(template) {
      if (!(template instanceof ChannelTemplate)) {
        throw new Error('template must be instance of ChannelTemplate');
      }
      return true;
    };

    return NotificatorChannel;

  })();

  NotificatorChannel.ChannelTemplate = ChannelTemplate;

  module.exports = NotificatorChannel;

}).call(this);
