// Generated by CoffeeScript 1.10.0
(function() {
  var ChannelTemplate, Destination, NotificatorChannel, swig;

  swig = require('swig');

  Destination = (function() {
    function Destination(destination1, language1) {
      this.destination = destination1;
      this.language = language1 != null ? language1 : null;
    }

    return Destination;

  })();

  ChannelTemplate = (function() {
    function ChannelTemplate() {}

    ChannelTemplate.prototype.getMessage = function(data) {
      var _data;
      _data = JSON.parse(JSON.stringify(data));
      _data._data = JSON.parse(JSON.stringify(data));
      return this.parseObjectValues(this, _data);
    };

    ChannelTemplate.prototype.parseObjectValues = function(object, data) {
      var key, result, value;
      result = {};
      for (key in object) {
        value = object[key];
        if (typeof value === 'object') {
          result[key] = this.parseObjectValues(value, data);
        } else if (typeof value === 'string') {
          value = swig.render(value, {
            locals: data
          });
          result[key] = value;
        } else if (typeof value !== 'function') {
          result[key] = value;
        }
      }
      return result;
    };

    return ChannelTemplate;

  })();

  NotificatorChannel = (function() {
    function NotificatorChannel(options) {
      this.options = options != null ? options : {};
      if (!this.options.getDestinations) {
        this.options.getDestinations = function(obj, callback) {
          return callback(new Error('options.getDestinations not specified'));
        };
      }
      if (!this.options.getTemplates) {
        this.options.getTemplates = function(obj, language, callback) {
          return callback(new Error('options.getTemplates not specified'));
        };
      }
    }

    NotificatorChannel.prototype.getDestinations = function(receiver, callback) {
      return this.options.getDestinations(receiver, (function(_this) {
        return function(err, _destinations) {
          var destination, destinations, error, i, len;
          if (err) {
            return callback(err);
          }
          try {
            destinations = [];
            for (i = 0, len = _destinations.length; i < len; i++) {
              destination = _destinations[i];
              if (!(destination instanceof Destination)) {
                destination = new Destination(destination);
              }
              _this.validateDestination(destination);
              destinations.push(destination);
            }
            return callback(null, destinations);
          } catch (error) {
            err = error;
            return callback(err);
          }
        };
      })(this));
    };

    NotificatorChannel.prototype.getTemplates = function(event, language, callback) {
      return this.options.getTemplates(event, language, (function(_this) {
        return function(err, templates) {
          var error, i, len, template;
          if (err) {
            return callback(err);
          }
          templates = templates || [];
          if (templates && !Array.isArray(templates)) {
            templates = [templates];
          }
          templates = templates.filter(function(x) {
            return x;
          });
          if (templates.length === 0 && _this.options.defaultTemplate) {
            templates = [_this.options.defaultTemplate];
          }
          try {
            for (i = 0, len = templates.length; i < len; i++) {
              template = templates[i];
              _this.validateTemplate(template);
            }
            _this.debug('gottemplates', drr, templates);
            return callback(null, templates);
          } catch (error) {
            err = error;
            return callback(err);
          }
        };
      })(this));
    };

    NotificatorChannel.prototype.sendMessage = function(message, destination, callback) {
      return callback(new Error('sendMessage not implemented'));
    };

    NotificatorChannel.prototype.validateDestination = function(destination) {
      return destination instanceof Destination;
    };

    NotificatorChannel.prototype.validateTemplate = function(template) {
      if (!(template instanceof ChannelTemplate)) {
        throw new Error('template must be instance of ChannelTemplate (' + typeof template + ')');
      }
      return true;
    };

    NotificatorChannel.prototype.debug = function() {
      if (this.options.debug) {
        return console.log.apply(console, arguments);
      }
    };

    return NotificatorChannel;

  })();

  NotificatorChannel.ChannelTemplate = ChannelTemplate;

  NotificatorChannel.Destination = Destination;

  module.exports = NotificatorChannel;

}).call(this);
